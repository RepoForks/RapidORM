package com.wangjie.rapidorm.core.generate.templates;

import com.wangjie.rapidorm.api.annotations.Column;
import com.wangjie.rapidorm.api.annotations.Table;
import com.wangjie.rapidorm.api.constant.Constants;
import com.wangjie.rapidorm.exception.RapidORMRuntimeException;
import com.wangjie.rapidorm.util.ReflectionUtils;

import android.support.annotation.NonNull;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Field;
import java.sql.Blob;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;

/**
 * Author: wangjie
 * Email: tiantian.china.2@gmail.com
 * Date: 7/2/15.
 */
@Deprecated
public class ModelPropertyGenerator {
    private String tPropertySource = "package ${package};\n" +
            "\n" +
            "import android.database.Cursor;\n" +
            "import com.wangjie.rapidorm.core.generate.withoutreflection.IModelProperty;\n" +
            "import com.wangjie.rapidorm.core.generate.templates.ModelFieldMapper;\n" +
            "\n" +
            "import ${clazzName};\n" +
            "\n" +
            "import java.util.List;\n" +
            "\n" +
            "// THIS CODE IS GENERATED BY RapidORM, DO NOT EDIT.\n" +
            "/**\n" +
            "* Property of ${clazzSimpleName}\n" +
            "*/\n" +
            "public class ${clazzPropertyName} implements IModelProperty<${clazzSimpleName}> {\n" +
            "\n" +
            "\n" +
            "    <#list fieldMappers as fp>\n" +
            "    public static final ModelFieldMapper ${fp.name} = new ModelFieldMapper(${fp.order}, \"${fp.fieldName}\", \"${fp.columnName}\");\n" +
            "    </#list>\n" +
            "\n" +
            "    public ${clazzPropertyName}() {\n" +
            "    }\n" +
            "\n" +
            "\n" +
            "    @Override\n" +
            "    public void bindInsertArgs(${clazzSimpleName} model, List<Object> insertArgs) {\n" +
            "        <#list insertArgs as ia>\n" +
            "        ${ia.argsType} ${ia.argsName} = model.${ia.getOrIsMethod}();\n" +
            "        insertArgs.add(null == ${ia.argsName} ? null : ${ia.argsName}${ia.booleanCase});\n" +
            "\n" +
            "        </#list>\n" +
            "    }\n" +
            "\n" +
            "    @Override\n" +
            "    public void bindUpdateArgs(${clazzSimpleName} model, List<Object> updateArgs) {\n" +
            "        <#list updateArgs as ia>\n" +
            "        ${ia.argsType} ${ia.argsName} = model.${ia.getOrIsMethod}();\n" +
            "        updateArgs.add(null == ${ia.argsName} ? null : ${ia.argsName}${ia.booleanCase});\n" +
            "\n" +
            "        </#list>\n" +
            "    }\n" +
            "\n" +
            "    @Override\n" +
            "    public void bindPkArgs(${clazzSimpleName} model, List<Object> pkArgs) {\n" +
            "        <#list pkArgs as ia>\n" +
            "        ${ia.argsType} ${ia.argsName} = model.${ia.getOrIsMethod}();\n" +
            "        pkArgs.add(null == ${ia.argsName} ? null : ${ia.argsName}${ia.booleanCase});\n" +
            "\n" +
            "        </#list>\n" +
            "    }\n" +
            "\n" +
            "    @Override\n" +
            "    public ${clazzSimpleName} parseFromCursor(Cursor cursor) {\n" +
            "        ${clazzSimpleName} model = new ${clazzSimpleName}();\n" +
            "        int index;\n" +
            "        <#list cursorProperties as cp>\n" +
            "        index = cursor.getColumnIndex(\"${cp.columnName}\");\n" +
            "        if(-1 != index){\n" +
            "            model.set${cp.name?cap_first}(cursor.isNull(index) ? null : (cursor.get${cp.dataType}(index)${cp.booleanCase}));\n" +
            "        }\n" +
            "\n" +
            "        </#list>\n" +
            "        return model;\n" +
            "    }\n" +
            "\n" +
            "}\n";

    public void generate(Class tableClazz, String outerDir, String packageName) throws Exception {

        if (null == packageName) {
            packageName = tableClazz.getPackage().getName();
        }

        Configuration config = new Configuration();
//        config.setClassForTemplateLoading(this.getClass(), "/");

//        config.setDirectoryForTemplateLoading(new File("templates"));
        config.setObjectWrapper(new DefaultObjectWrapper());

//        Template tableTemplate = config.getTemplate("TProperty.ftl");
        StringReader reader = new StringReader(tPropertySource);
        Template tableTemplate = new Template("templateName", reader, config);

        String tableClazzSimpleName = tableClazz.getSimpleName();
        String outClazzName = tableClazzSimpleName + "Property";

        Map<String, Object> root = new HashMap<>();
        root.put("package", packageName);
        root.put("clazzName", tableClazz.getName());
        root.put("clazzPropertyName", outClazzName);
        root.put("clazzSimpleName", tableClazzSimpleName);


        final Collection<Map<String, String>> fieldMappers = new ArrayList<>();
        root.put("fieldMappers", fieldMappers);

        final Collection<Map<String, String>> insertArgs = new ArrayList<>();
        root.put("insertArgs", insertArgs);

        final Collection<Map<String, String>> updateArgs = new ArrayList<>();
        root.put("updateArgs", updateArgs);

        final Collection<Map<String, String>> pkArgs = new ArrayList<>();
        root.put("pkArgs", pkArgs);

        final Collection<Map<String, String>> cursorProperties = new ArrayList<>();
        root.put("cursorProperties", cursorProperties);


        ReflectionUtils.doWithFieldsWithSuper(tableClazz, new ReflectionUtils.FieldCallback() {
            int index = 0;

            @Override
            public void doWith(Field field) throws Exception {
                Column column = field.getAnnotation(Column.class);
                if (null == column) {
                    return;
                }

                String name = field.getName();
                String columnName = getColumnName(field, column);
                Class<?> fieldType = field.getType();
                boolean isBoolean = Boolean.class == fieldType || boolean.class == fieldType;
                // Column名

                Map<String, String> fieldMapper = new HashMap<>();
                fieldMapper.put("name", name);
                fieldMapper.put("order", String.valueOf(index));
                fieldMapper.put("fieldName", name);
                fieldMapper.put("columnName", columnName);
                fieldMappers.add(fieldMapper);


                boolean primaryKey = column.primaryKey();
                String typeSimpleName = field.getType().getSimpleName();

                // bindArgs方法
                if (primaryKey) {
//                    addBindKey(isBoolean, name, pkArgs);
                    addBindKeyExtra(typeSimpleName, isBoolean, name, pkArgs);
                    if (!column.autoincrement()) {
//                        addBindKey(isBoolean, name, insertArgs);
                        addBindKeyExtra(typeSimpleName, isBoolean, name, insertArgs);
                    }
                } else {
//                    addBindKey(isBoolean, name, insertArgs);
                    addBindKeyExtra(typeSimpleName, isBoolean, name, insertArgs);

//                    addBindKey(isBoolean, name, updateArgs);
                    addBindKeyExtra(typeSimpleName, isBoolean, name, updateArgs);
                }

                // parseCursor方法
                Map<String, String> keys = new HashMap<>();
                keys.put("name", name);
                String dataType = getDataType(fieldType);
                if (null == dataType) {
                    throw new RapidORMRuntimeException("No cursor.getXXX() method for fieldType: " + fieldType.getName());
                }
                keys.put("dataType", dataType);
                keys.put("columnName", columnName);
                keys.put("booleanCase", isBoolean ? " == 1" : "");
                cursorProperties.add(keys);


                index++;
            }
        });

        File file = toJavaFilename(toFileForceExists(outerDir), packageName, outClazzName);
        if (file.exists()) {
            file.delete();
        }
        file.getParentFile().mkdirs();
        file.createNewFile();

//        Writer out = new OutputStreamWriter(System.out);
        Writer out = new FileWriter(file);
        tableTemplate.process(root, out);
        out.flush();
        reader.close();

    }

    private void addBindKeyExtra(String typeName, boolean isBoolean, String name, Collection<Map<String, String>> args) {
        Map<String, String> keys = new HashMap<>();
        String getMethodName;
        if (isBoolean) {
            getMethodName = name.startsWith("is") ? name : getMethod("is", name);
        } else {
            getMethodName = getMethod("get", name);
        }
        keys.put("getOrIsMethod", getMethodName);
        keys.put("argsType", typeName);
        keys.put("argsName", name);
        keys.put("booleanCase", isBoolean ? " ? 1 : 0" : "");
        args.add(keys);
    }

    private void addBindKey(boolean isBoolean, String name, Collection<Map<String, String>> args) {
        Map<String, String> keys = new HashMap<>();
        String getMethodName;
        if (isBoolean) {
            getMethodName = name.startsWith("is") ? name : getMethod("is", name);
        } else {
            getMethodName = getMethod("get", name);
        }
        keys.put("getOrIsMethod", getMethodName);
        args.add(keys);
    }

    private String getMethod(String head, String name) {
        return head + name.substring(0, 1).toUpperCase() + name.substring(1);
    }

    /**
     * 获得Table对应的value值（表名）
     *
     * @return 如果Table注解为空，那么直接使用类名作为表名；否则使用value值
     */
    @NonNull
    private String getTableName(Class tableClazz, Table table) {
        String name = table.name();
        if (Constants.AnnotationNotSetValue.TABLE_NAME.equals(name)) { // 如果类中没有加Table注解，或者Table注解为空，那么直接使用类名作为表名
            return tableClazz.getSimpleName();
        }
        return name;
    }


    /**
     * 获得Column对应的value值（表的列名）
     *
     * @param field
     * @return 如果该属性的column注解value为空，则使用属性名作为列名；否则使用value值
     */
    private String getColumnName(Field field, Column column) {
        String name = column.name();
        if (Constants.AnnotationNotSetValue.COLUMN_NAME.equals(name)) { // 如果该属性的column注解value为空，则使用属性名
            return field.getName();
        }
        return name;
    }


    protected File toJavaFilename(File outDirFile, String javaPackage, String javaClassName) {
        String packageSubPath = javaPackage.replace('.', '/');
        File packagePath = new File(outDirFile, packageSubPath);
        File file = new File(packagePath, javaClassName + ".java");
        return file;
    }

    protected File toFileForceExists(String filename) throws IOException {
        File file = new File(filename);
        if (!file.exists()) {
            throw new IOException(filename
                    + " does not exist. This check is to prevent accidental file generation into a wrong path.");
        }
        return file;
    }

    /**
     * @param fieldType
     * @return
     */
    protected String getDataType(Class fieldType) {
        if (String.class == fieldType) {
            return "String";
        } else if (Long.class == fieldType || long.class == fieldType) {
            return "Long";
        } else if (Integer.class == fieldType || int.class == fieldType || Boolean.class == fieldType || boolean.class == fieldType) {
            return "Int";
        } else if (Short.class == fieldType || short.class == fieldType) {
            return "Short";
        } else if (Double.class == fieldType || double.class == fieldType) {
            return "Double";
        } else if (Float.class == fieldType || float.class == fieldType) {
            return "Float";
        } else if (Blob.class == fieldType) {
            return "Blob";
        }
        return null;
    }

}
