package com.wangjie.rapidorm.core.config;

import android.database.Cursor;
import android.support.annotation.NonNull;
import com.wangjie.rapidorm.api.annotations.Column;
import com.wangjie.rapidorm.constants.RapidORMConfig;
import com.wangjie.rapidorm.core.delegate.database.RapidORMSQLiteDatabaseDelegate;
import com.wangjie.rapidorm.core.delegate.sqlitestatement.RapidORMSQLiteStatementDelegate;
import com.wangjie.rapidorm.core.generate.statement.*;
import com.wangjie.rapidorm.core.generate.statement.util.SqlUtil;
import com.wangjie.rapidorm.util.ReflectionUtils;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Table configuration
 * <p>
 * Author: wangjie
 * Email: tiantian.china.2@gmail.com
 * Date: 6/25/15.
 */
public abstract class TableConfig<T> {
    /**
     * Table name in database
     */
    protected String tableName;
    /**
     * Table class in code
     */
    protected Class<T> tableClazz;

    protected List<ColumnConfig> allColumnConfigs = new ArrayList<>();
    protected HashMap<String, ColumnConfig> allFieldColumnConfigMapper = new HashMap<>();
    protected List<ColumnConfig> pkColumnConfigs = new ArrayList<>();
    protected List<ColumnConfig> noPkColumnConfigs = new ArrayList<>();

    protected List<ColumnConfig> indexColumnConfigsCache;
    protected List<ColumnConfig> uniqueComboColumnConfigsCache;

    private InsertStatement<T> insertStatement;
    private UpdateStatement<T> updateStatement;
    private DeleteStatement<T> deleteStatement;

    public TableConfig(@NonNull Class<T> tableClazz) {
        this.tableClazz = tableClazz;
        parseAllConfigs();

        if (RapidORMConfig.BIND_FIELD_COLUMN_WITH_REFLECTION) {
            bindFieldColumnWithReflection();
        }

    }

    /**
     * Implementation by subclass which auto generated by rapidORM
     */
    protected abstract void parseAllConfigs();

    private void bindFieldColumnWithReflection() {
        ReflectionUtils.doWithFieldsWithSuper(tableClazz, new ReflectionUtils.FieldCallback() {
            @Override
            public void doWith(Field field) throws Exception {
                Column column = field.getAnnotation(Column.class);
                if (null == column) {
                    return;
                }
                ColumnConfig columnConfig = allFieldColumnConfigMapper.get(field.getName());
                if (null != columnConfig) {
                    columnConfig.setField(field);
                }
            }
        });
        allFieldColumnConfigMapper = null;
    }


    protected ColumnConfig buildColumnConfig(String name,
                                             boolean autoincrement,
                                             boolean notNull,
                                             String defaultValue,
                                             boolean index,
                                             boolean unique,
                                             boolean uniqueCombo,
                                             boolean primaryKey,
                                             String dbType) {
        ColumnConfig columnConfig = new ColumnConfig();
        // column name
        columnConfig.setColumnName(name);
        // autoincrement
        columnConfig.setAutoincrement(autoincrement);
        // notNull
        columnConfig.setNotNull(notNull);
        // defaultValue
        columnConfig.setDefaultValue(defaultValue);
        // index
        columnConfig.setIndex(index);
        // unique
        columnConfig.setUnique(unique);
        // uniqueCombo
        columnConfig.setUniqueCombo(uniqueCombo);
        // primaryKey
        columnConfig.setPrimaryKey(primaryKey);
        // dbType
        columnConfig.setDbType(dbType);
        return columnConfig;
    }

    public List<ColumnConfig> getUniqueComboColumnConfigs() {
        List<ColumnConfig> uniqueComboColumnConfigs = new ArrayList<>();
        for (ColumnConfig columnConfig : allColumnConfigs) {
            if (columnConfig.isUniqueCombo()) {
                uniqueComboColumnConfigs.add(columnConfig);
            }
        }
        return uniqueComboColumnConfigs;
    }

    public List<ColumnConfig> getUniqueComboColumnConfigsFromCache() {
        if (null == uniqueComboColumnConfigsCache) {
            uniqueComboColumnConfigsCache = getUniqueComboColumnConfigs();
        }
        return uniqueComboColumnConfigsCache;
    }

    public List<ColumnConfig> getIndexColumnConfigs() {
        List<ColumnConfig> indexColumnConfigs = new ArrayList<>();
        for (ColumnConfig columnConfig : allColumnConfigs) {
            if (columnConfig.isIndex()) {
                indexColumnConfigs.add(columnConfig);
            }
        }
        return indexColumnConfigs;
    }

    public List<ColumnConfig> getIndexColumnConfigsFromCache() {
        if (null == indexColumnConfigsCache) {
            indexColumnConfigsCache = getIndexColumnConfigs();
        }
        return indexColumnConfigsCache;
    }

    public String getTableName() {
        return tableName;
    }

    public Class getTableClazz() {
        return tableClazz;
    }

    public List<ColumnConfig> getAllColumnConfigs() {
        return allColumnConfigs;
    }

    public List<ColumnConfig> getPkColumnConfigs() {
        return pkColumnConfigs;
    }

    public List<ColumnConfig> getNoPkColumnConfigs() {
        return noPkColumnConfigs;
    }

    public InsertStatement<T> getInsertStatement() {
        if (null == insertStatement) {
            insertStatement = new InsertStatement<>(this);
        }
        return insertStatement;
    }

    public UpdateStatement<T> getUpdateStatement() {
        if (null == updateStatement) {
            updateStatement = new UpdateStatement<>(this);
        }
        return updateStatement;
    }

    public DeleteStatement<T> getDeleteStatement() {
        if (null == deleteStatement) {
            deleteStatement = new DeleteStatement<>(this);
        }
        return deleteStatement;
    }

    private List<ColumnConfig> insertColumnConfigs;

    public List<ColumnConfig> getInsertColumnConfigs() {
        if (null == insertColumnConfigs) {
            insertColumnConfigs = SqlUtil.getInsertColumnConfigs(this);
        }
        return insertColumnConfigs;
    }

    //    public abstract void bindInsertArgs(T model, List<Object> insertArgs);
    public abstract int bindInsertArgs(T model, RapidORMSQLiteStatementDelegate statement, int indexOffset);

    public abstract int bindUpdateArgs(T model, RapidORMSQLiteStatementDelegate statement, int indexOffset);

    public abstract int bindPkArgs(T model, RapidORMSQLiteStatementDelegate statement, int indexOffset);

    public abstract T parseFromCursor(Cursor cursor);

    public abstract void createTable(RapidORMSQLiteDatabaseDelegate db, boolean ifNotExists) throws Exception;

}